{"version":3,"sources":["webpack:///./src/pages/search.js","webpack:///./node_modules/lunr/lunr.js"],"names":["SearchPage","data","location","siteTitle","site","siteMetadata","title","q","URLSearchParams","search","slice","get","store","LunrIndex","index","Index","load","results","map","ref","slug","error","console","log","className","initialQuery","length","result","key","to","excerpt","pageQuery","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","this","message","asString","obj","toString","clone","Object","create","keys","i","val","Array","isArray","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","prototype","undefined","Set","elements","complete","intersect","other","union","contains","empty","object","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","x","Math","abs","Token","str","metadata","update","fn","tokenizer","t","toLowerCase","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","serialised","forEach","fnName","Error","fns","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","c","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","frame","pop","noEditNode","_char2","insertionNode","substitutionNode","transposeNode","charA","charB","_char3","_final","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","qEdge","nEdge","_final2","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","_char4","parent","downTo","childKey","attrs","invertedIndex","fieldVectors","tokenSet","fields","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","m","termTokenSet","expandedTerms","presence","REQUIRED","field","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","matches","isNegated","docMatch","fieldVector","score","matchData","combine","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","fieldBoost","docBoost","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","_char5","width","ignore","backup","acceptDigitRun","_char6","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","_char7","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN"],"mappings":"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","file":"component---src-pages-search-js-8b2502f9be0c75f26fc7.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { Index } from \"lunr\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport SearchForm from \"../components/searchForm\"\n\nconst SearchPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  // We can read what follows the ?q= here\n  // While you could install some external library\n  // (or should if you care about IE users),\n  // URLSearchParams provides a native way to get URL params\n  // location.search.slice(1) gets rid of the \"?\"\n  const params = new URLSearchParams(location.search.slice(1))\n  const q = params.get(\"q\") || \"\"\n\n  // LunrIndex is available via page query\n  const { store } = data.LunrIndex\n  // lunr in action here\n  const index = Index.load(data.LunrIndex.index)\n  let results = []\n  try {\n    // search is a lunr method\n    results = index.search(q).map(({ ref }) => {\n      // Map search results to an array of {slug, title, excerpt} objects\n      return {\n        slug: ref,\n        ...store[ref],\n      }\n    })\n  } catch (error) {\n    console.log(error)\n  }\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Search results\" />\n      <section className=\"main-content\">\n      {q ? <h1>Search results</h1> : <h1>What are you looking for?</h1>}\n      <SearchForm initialQuery={q} />\n      {results.length ? (\n        results.map(result => {\n          return (\n            <article key={result.slug}>\n              <h2>\n                <Link to={result.slug}>{result.title || result.slug}</Link>\n              </h2>\n              <p>{result.excerpt}</p>\n            </article>\n          )\n        })\n      ) : (\n        <p>Nothing found.</p>\n      )}\n      </section>\n    </Layout>\n  )\n}\nexport default SearchPage\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    LunrIndex\n  }\n`","require(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.array.reduce\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.date.to-json\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\n/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.8\n * Copyright (C) 2019 Oliver Nightingale\n * @license MIT\n */\n;\n\n(function () {\n  /**\n   * A convenience function for configuring and constructing\n   * a new lunr Index.\n   *\n   * A lunr.Builder instance is created and the pipeline setup\n   * with a trimmer, stop word filter and stemmer.\n   *\n   * This builder object is yielded to the configuration function\n   * that is passed as a parameter, allowing the list of fields\n   * and other builder parameters to be customised.\n   *\n   * All documents _must_ be added within the passed config function.\n   *\n   * @example\n   * var idx = lunr(function () {\n   *   this.field('title')\n   *   this.field('body')\n   *   this.ref('id')\n   *\n   *   documents.forEach(function (doc) {\n   *     this.add(doc)\n   *   }, this)\n   * })\n   *\n   * @see {@link lunr.Builder}\n   * @see {@link lunr.Pipeline}\n   * @see {@link lunr.trimmer}\n   * @see {@link lunr.stopWordFilter}\n   * @see {@link lunr.stemmer}\n   * @namespace {function} lunr\n   */\n  var lunr = function lunr(config) {\n    var builder = new lunr.Builder();\n    builder.pipeline.add(lunr.trimmer, lunr.stopWordFilter, lunr.stemmer);\n    builder.searchPipeline.add(lunr.stemmer);\n    config.call(builder, builder);\n    return builder.build();\n  };\n\n  lunr.version = \"2.3.8\";\n  /*!\n   * lunr.utils\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * A namespace containing utils for the rest of the lunr library\n   * @namespace lunr.utils\n   */\n\n  lunr.utils = {};\n  /**\n   * Print a warning message to the console.\n   *\n   * @param {String} message The message to be printed.\n   * @memberOf lunr.utils\n   * @function\n   */\n\n  lunr.utils.warn = function (global) {\n    /* eslint-disable no-console */\n    return function (message) {\n      if (global.console && console.warn) {\n        console.warn(message);\n      }\n    };\n    /* eslint-enable no-console */\n  }(this);\n  /**\n   * Convert an object to a string.\n   *\n   * In the case of `null` and `undefined` the function returns\n   * the empty string, in all other cases the result of calling\n   * `toString` on the passed object is returned.\n   *\n   * @param {Any} obj The object to convert to a string.\n   * @return {String} string representation of the passed object.\n   * @memberOf lunr.utils\n   */\n\n\n  lunr.utils.asString = function (obj) {\n    if (obj === void 0 || obj === null) {\n      return \"\";\n    } else {\n      return obj.toString();\n    }\n  };\n  /**\n   * Clones an object.\n   *\n   * Will create a copy of an existing object such that any mutations\n   * on the copy cannot affect the original.\n   *\n   * Only shallow objects are supported, passing a nested object to this\n   * function will cause a TypeError.\n   *\n   * Objects with primitives, and arrays of primitives are supported.\n   *\n   * @param {Object} obj The object to clone.\n   * @return {Object} a clone of the passed object.\n   * @throws {TypeError} when a nested object is passed.\n   * @memberOf Utils\n   */\n\n\n  lunr.utils.clone = function (obj) {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    var clone = Object.create(null),\n        keys = Object.keys(obj);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i],\n          val = obj[key];\n\n      if (Array.isArray(val)) {\n        clone[key] = val.slice();\n        continue;\n      }\n\n      if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') {\n        clone[key] = val;\n        continue;\n      }\n\n      throw new TypeError(\"clone is not deep and does not support nested objects\");\n    }\n\n    return clone;\n  };\n\n  lunr.FieldRef = function (docRef, fieldName, stringValue) {\n    this.docRef = docRef;\n    this.fieldName = fieldName;\n    this._stringValue = stringValue;\n  };\n\n  lunr.FieldRef.joiner = \"/\";\n\n  lunr.FieldRef.fromString = function (s) {\n    var n = s.indexOf(lunr.FieldRef.joiner);\n\n    if (n === -1) {\n      throw \"malformed field ref string\";\n    }\n\n    var fieldRef = s.slice(0, n),\n        docRef = s.slice(n + 1);\n    return new lunr.FieldRef(docRef, fieldRef, s);\n  };\n\n  lunr.FieldRef.prototype.toString = function () {\n    if (this._stringValue == undefined) {\n      this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef;\n    }\n\n    return this._stringValue;\n  };\n  /*!\n   * lunr.Set\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * A lunr set.\n   *\n   * @constructor\n   */\n\n\n  lunr.Set = function (elements) {\n    this.elements = Object.create(null);\n\n    if (elements) {\n      this.length = elements.length;\n\n      for (var i = 0; i < this.length; i++) {\n        this.elements[elements[i]] = true;\n      }\n    } else {\n      this.length = 0;\n    }\n  };\n  /**\n   * A complete set that contains all elements.\n   *\n   * @static\n   * @readonly\n   * @type {lunr.Set}\n   */\n\n\n  lunr.Set.complete = {\n    intersect: function intersect(other) {\n      return other;\n    },\n    union: function union(other) {\n      return other;\n    },\n    contains: function contains() {\n      return true;\n    }\n  };\n  /**\n   * An empty set that contains no elements.\n   *\n   * @static\n   * @readonly\n   * @type {lunr.Set}\n   */\n\n  lunr.Set.empty = {\n    intersect: function intersect() {\n      return this;\n    },\n    union: function union(other) {\n      return other;\n    },\n    contains: function contains() {\n      return false;\n    }\n  };\n  /**\n   * Returns true if this set contains the specified object.\n   *\n   * @param {object} object - Object whose presence in this set is to be tested.\n   * @returns {boolean} - True if this set contains the specified object.\n   */\n\n  lunr.Set.prototype.contains = function (object) {\n    return !!this.elements[object];\n  };\n  /**\n   * Returns a new set containing only the elements that are present in both\n   * this set and the specified set.\n   *\n   * @param {lunr.Set} other - set to intersect with this set.\n   * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n   */\n\n\n  lunr.Set.prototype.intersect = function (other) {\n    var a,\n        b,\n        elements,\n        intersection = [];\n\n    if (other === lunr.Set.complete) {\n      return this;\n    }\n\n    if (other === lunr.Set.empty) {\n      return other;\n    }\n\n    if (this.length < other.length) {\n      a = this;\n      b = other;\n    } else {\n      a = other;\n      b = this;\n    }\n\n    elements = Object.keys(a.elements);\n\n    for (var i = 0; i < elements.length; i++) {\n      var element = elements[i];\n\n      if (element in b.elements) {\n        intersection.push(element);\n      }\n    }\n\n    return new lunr.Set(intersection);\n  };\n  /**\n   * Returns a new set combining the elements of this and the specified set.\n   *\n   * @param {lunr.Set} other - set to union with this set.\n   * @return {lunr.Set} a new set that is the union of this and the specified set.\n   */\n\n\n  lunr.Set.prototype.union = function (other) {\n    if (other === lunr.Set.complete) {\n      return lunr.Set.complete;\n    }\n\n    if (other === lunr.Set.empty) {\n      return this;\n    }\n\n    return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)));\n  };\n  /**\n   * A function to calculate the inverse document frequency for\n   * a posting. This is shared between the builder and the index\n   *\n   * @private\n   * @param {object} posting - The posting for a given term\n   * @param {number} documentCount - The total number of documents.\n   */\n\n\n  lunr.idf = function (posting, documentCount) {\n    var documentsWithTerm = 0;\n\n    for (var fieldName in posting) {\n      if (fieldName == '_index') continue; // Ignore the term index, its not a field\n\n      documentsWithTerm += Object.keys(posting[fieldName]).length;\n    }\n\n    var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5);\n    return Math.log(1 + Math.abs(x));\n  };\n  /**\n   * A token wraps a string representation of a token\n   * as it is passed through the text processing pipeline.\n   *\n   * @constructor\n   * @param {string} [str=''] - The string token being wrapped.\n   * @param {object} [metadata={}] - Metadata associated with this token.\n   */\n\n\n  lunr.Token = function (str, metadata) {\n    this.str = str || \"\";\n    this.metadata = metadata || {};\n  };\n  /**\n   * Returns the token string that is being wrapped by this object.\n   *\n   * @returns {string}\n   */\n\n\n  lunr.Token.prototype.toString = function () {\n    return this.str;\n  };\n  /**\n   * A token update function is used when updating or optionally\n   * when cloning a token.\n   *\n   * @callback lunr.Token~updateFunction\n   * @param {string} str - The string representation of the token.\n   * @param {Object} metadata - All metadata associated with this token.\n   */\n\n  /**\n   * Applies the given function to the wrapped string token.\n   *\n   * @example\n   * token.update(function (str, metadata) {\n   *   return str.toUpperCase()\n   * })\n   *\n   * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n   * @returns {lunr.Token}\n   */\n\n\n  lunr.Token.prototype.update = function (fn) {\n    this.str = fn(this.str, this.metadata);\n    return this;\n  };\n  /**\n   * Creates a clone of this token. Optionally a function can be\n   * applied to the cloned token.\n   *\n   * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n   * @returns {lunr.Token}\n   */\n\n\n  lunr.Token.prototype.clone = function (fn) {\n    fn = fn || function (s) {\n      return s;\n    };\n\n    return new lunr.Token(fn(this.str, this.metadata), this.metadata);\n  };\n  /*!\n   * lunr.tokenizer\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * A function for splitting a string into tokens ready to be inserted into\n   * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n   * the value of this property to change how strings are split into tokens.\n   *\n   * This tokenizer will convert its parameter to a string by calling `toString` and\n   * then will split this string on the character in `lunr.tokenizer.separator`.\n   * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n   *\n   * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n   * added as metadata to every token that is created from the object to be tokenized.\n   *\n   * @static\n   * @param {?(string|object|object[])} obj - The object to convert into tokens\n   * @param {?object} metadata - Optional metadata to associate with every token\n   * @returns {lunr.Token[]}\n   * @see {@link lunr.Pipeline}\n   */\n\n\n  lunr.tokenizer = function (obj, metadata) {\n    if (obj == null || obj == undefined) {\n      return [];\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(function (t) {\n        return new lunr.Token(lunr.utils.asString(t).toLowerCase(), lunr.utils.clone(metadata));\n      });\n    }\n\n    var str = obj.toString().toLowerCase(),\n        len = str.length,\n        tokens = [];\n\n    for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n      var _char = str.charAt(sliceEnd),\n          sliceLength = sliceEnd - sliceStart;\n\n      if (_char.match(lunr.tokenizer.separator) || sliceEnd == len) {\n        if (sliceLength > 0) {\n          var tokenMetadata = lunr.utils.clone(metadata) || {};\n          tokenMetadata[\"position\"] = [sliceStart, sliceLength];\n          tokenMetadata[\"index\"] = tokens.length;\n          tokens.push(new lunr.Token(str.slice(sliceStart, sliceEnd), tokenMetadata));\n        }\n\n        sliceStart = sliceEnd + 1;\n      }\n    }\n\n    return tokens;\n  };\n  /**\n   * The separator used to split a string into tokens. Override this property to change the behaviour of\n   * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n   *\n   * @static\n   * @see lunr.tokenizer\n   */\n\n\n  lunr.tokenizer.separator = /[\\s\\-]+/;\n  /*!\n   * lunr.Pipeline\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * lunr.Pipelines maintain an ordered list of functions to be applied to all\n   * tokens in documents entering the search index and queries being ran against\n   * the index.\n   *\n   * An instance of lunr.Index created with the lunr shortcut will contain a\n   * pipeline with a stop word filter and an English language stemmer. Extra\n   * functions can be added before or after either of these functions or these\n   * default functions can be removed.\n   *\n   * When run the pipeline will call each function in turn, passing a token, the\n   * index of that token in the original list of all tokens and finally a list of\n   * all the original tokens.\n   *\n   * The output of functions in the pipeline will be passed to the next function\n   * in the pipeline. To exclude a token from entering the index the function\n   * should return undefined, the rest of the pipeline will not be called with\n   * this token.\n   *\n   * For serialisation of pipelines to work, all functions used in an instance of\n   * a pipeline should be registered with lunr.Pipeline. Registered functions can\n   * then be loaded. If trying to load a serialised pipeline that uses functions\n   * that are not registered an error will be thrown.\n   *\n   * If not planning on serialising the pipeline then registering pipeline functions\n   * is not necessary.\n   *\n   * @constructor\n   */\n\n  lunr.Pipeline = function () {\n    this._stack = [];\n  };\n\n  lunr.Pipeline.registeredFunctions = Object.create(null);\n  /**\n   * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n   * string as well as all known metadata. A pipeline function can mutate the token string\n   * or mutate (or add) metadata for a given token.\n   *\n   * A pipeline function can indicate that the passed token should be discarded by returning\n   * null, undefined or an empty string. This token will not be passed to any downstream pipeline\n   * functions and will not be added to the index.\n   *\n   * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n   * to any downstream pipeline functions and all will returned tokens will be added to the index.\n   *\n   * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n   *\n   * @interface lunr.PipelineFunction\n   * @param {lunr.Token} token - A token from the document being processed.\n   * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n   * @param {lunr.Token[]} tokens - All tokens for this document/field.\n   * @returns {(?lunr.Token|lunr.Token[])}\n   */\n\n  /**\n   * Register a function with the pipeline.\n   *\n   * Functions that are used in the pipeline should be registered if the pipeline\n   * needs to be serialised, or a serialised pipeline needs to be loaded.\n   *\n   * Registering a function does not add it to a pipeline, functions must still be\n   * added to instances of the pipeline for them to be used when running a pipeline.\n   *\n   * @param {lunr.PipelineFunction} fn - The function to check for.\n   * @param {String} label - The label to register this function with\n   */\n\n  lunr.Pipeline.registerFunction = function (fn, label) {\n    if (label in this.registeredFunctions) {\n      lunr.utils.warn('Overwriting existing registered function: ' + label);\n    }\n\n    fn.label = label;\n    lunr.Pipeline.registeredFunctions[fn.label] = fn;\n  };\n  /**\n   * Warns if the function is not registered as a Pipeline function.\n   *\n   * @param {lunr.PipelineFunction} fn - The function to check for.\n   * @private\n   */\n\n\n  lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n    var isRegistered = fn.label && fn.label in this.registeredFunctions;\n\n    if (!isRegistered) {\n      lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn);\n    }\n  };\n  /**\n   * Loads a previously serialised pipeline.\n   *\n   * All functions to be loaded must already be registered with lunr.Pipeline.\n   * If any function from the serialised data has not been registered then an\n   * error will be thrown.\n   *\n   * @param {Object} serialised - The serialised pipeline to load.\n   * @returns {lunr.Pipeline}\n   */\n\n\n  lunr.Pipeline.load = function (serialised) {\n    var pipeline = new lunr.Pipeline();\n    serialised.forEach(function (fnName) {\n      var fn = lunr.Pipeline.registeredFunctions[fnName];\n\n      if (fn) {\n        pipeline.add(fn);\n      } else {\n        throw new Error('Cannot load unregistered function: ' + fnName);\n      }\n    });\n    return pipeline;\n  };\n  /**\n   * Adds new functions to the end of the pipeline.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.add = function () {\n    var fns = Array.prototype.slice.call(arguments);\n    fns.forEach(function (fn) {\n      lunr.Pipeline.warnIfFunctionNotRegistered(fn);\n\n      this._stack.push(fn);\n    }, this);\n  };\n  /**\n   * Adds a single function after a function that already exists in the\n   * pipeline.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n   * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.after = function (existingFn, newFn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(newFn);\n\n    var pos = this._stack.indexOf(existingFn);\n\n    if (pos == -1) {\n      throw new Error('Cannot find existingFn');\n    }\n\n    pos = pos + 1;\n\n    this._stack.splice(pos, 0, newFn);\n  };\n  /**\n   * Adds a single function before a function that already exists in the\n   * pipeline.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n   * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.before = function (existingFn, newFn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(newFn);\n\n    var pos = this._stack.indexOf(existingFn);\n\n    if (pos == -1) {\n      throw new Error('Cannot find existingFn');\n    }\n\n    this._stack.splice(pos, 0, newFn);\n  };\n  /**\n   * Removes a function from the pipeline.\n   *\n   * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n   */\n\n\n  lunr.Pipeline.prototype.remove = function (fn) {\n    var pos = this._stack.indexOf(fn);\n\n    if (pos == -1) {\n      return;\n    }\n\n    this._stack.splice(pos, 1);\n  };\n  /**\n   * Runs the current list of functions that make up the pipeline against the\n   * passed tokens.\n   *\n   * @param {Array} tokens The tokens to run through the pipeline.\n   * @returns {Array}\n   */\n\n\n  lunr.Pipeline.prototype.run = function (tokens) {\n    var stackLength = this._stack.length;\n\n    for (var i = 0; i < stackLength; i++) {\n      var fn = this._stack[i];\n      var memo = [];\n\n      for (var j = 0; j < tokens.length; j++) {\n        var result = fn(tokens[j], j, tokens);\n        if (result === null || result === void 0 || result === '') continue;\n\n        if (Array.isArray(result)) {\n          for (var k = 0; k < result.length; k++) {\n            memo.push(result[k]);\n          }\n        } else {\n          memo.push(result);\n        }\n      }\n\n      tokens = memo;\n    }\n\n    return tokens;\n  };\n  /**\n   * Convenience method for passing a string through a pipeline and getting\n   * strings out. This method takes care of wrapping the passed string in a\n   * token and mapping the resulting tokens back to strings.\n   *\n   * @param {string} str - The string to pass through the pipeline.\n   * @param {?object} metadata - Optional metadata to associate with the token\n   * passed to the pipeline.\n   * @returns {string[]}\n   */\n\n\n  lunr.Pipeline.prototype.runString = function (str, metadata) {\n    var token = new lunr.Token(str, metadata);\n    return this.run([token]).map(function (t) {\n      return t.toString();\n    });\n  };\n  /**\n   * Resets the pipeline by removing any existing processors.\n   *\n   */\n\n\n  lunr.Pipeline.prototype.reset = function () {\n    this._stack = [];\n  };\n  /**\n   * Returns a representation of the pipeline ready for serialisation.\n   *\n   * Logs a warning if the function has not been registered.\n   *\n   * @returns {Array}\n   */\n\n\n  lunr.Pipeline.prototype.toJSON = function () {\n    return this._stack.map(function (fn) {\n      lunr.Pipeline.warnIfFunctionNotRegistered(fn);\n      return fn.label;\n    });\n  };\n  /*!\n   * lunr.Vector\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * A vector is used to construct the vector space of documents and queries. These\n   * vectors support operations to determine the similarity between two documents or\n   * a document and a query.\n   *\n   * Normally no parameters are required for initializing a vector, but in the case of\n   * loading a previously dumped vector the raw elements can be provided to the constructor.\n   *\n   * For performance reasons vectors are implemented with a flat array, where an elements\n   * index is immediately followed by its value. E.g. [index, value, index, value]. This\n   * allows the underlying array to be as sparse as possible and still offer decent\n   * performance when being used for vector calculations.\n   *\n   * @constructor\n   * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n   */\n\n\n  lunr.Vector = function (elements) {\n    this._magnitude = 0;\n    this.elements = elements || [];\n  };\n  /**\n   * Calculates the position within the vector to insert a given index.\n   *\n   * This is used internally by insert and upsert. If there are duplicate indexes then\n   * the position is returned as if the value for that index were to be updated, but it\n   * is the callers responsibility to check whether there is a duplicate at that index\n   *\n   * @param {Number} insertIdx - The index at which the element should be inserted.\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.positionForIndex = function (index) {\n    // For an empty vector the tuple can be inserted at the beginning\n    if (this.elements.length == 0) {\n      return 0;\n    }\n\n    var start = 0,\n        end = this.elements.length / 2,\n        sliceLength = end - start,\n        pivotPoint = Math.floor(sliceLength / 2),\n        pivotIndex = this.elements[pivotPoint * 2];\n\n    while (sliceLength > 1) {\n      if (pivotIndex < index) {\n        start = pivotPoint;\n      }\n\n      if (pivotIndex > index) {\n        end = pivotPoint;\n      }\n\n      if (pivotIndex == index) {\n        break;\n      }\n\n      sliceLength = end - start;\n      pivotPoint = start + Math.floor(sliceLength / 2);\n      pivotIndex = this.elements[pivotPoint * 2];\n    }\n\n    if (pivotIndex == index) {\n      return pivotPoint * 2;\n    }\n\n    if (pivotIndex > index) {\n      return pivotPoint * 2;\n    }\n\n    if (pivotIndex < index) {\n      return (pivotPoint + 1) * 2;\n    }\n  };\n  /**\n   * Inserts an element at an index within the vector.\n   *\n   * Does not allow duplicates, will throw an error if there is already an entry\n   * for this index.\n   *\n   * @param {Number} insertIdx - The index at which the element should be inserted.\n   * @param {Number} val - The value to be inserted into the vector.\n   */\n\n\n  lunr.Vector.prototype.insert = function (insertIdx, val) {\n    this.upsert(insertIdx, val, function () {\n      throw \"duplicate index\";\n    });\n  };\n  /**\n   * Inserts or updates an existing index within the vector.\n   *\n   * @param {Number} insertIdx - The index at which the element should be inserted.\n   * @param {Number} val - The value to be inserted into the vector.\n   * @param {function} fn - A function that is called for updates, the existing value and the\n   * requested value are passed as arguments\n   */\n\n\n  lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n    this._magnitude = 0;\n    var position = this.positionForIndex(insertIdx);\n\n    if (this.elements[position] == insertIdx) {\n      this.elements[position + 1] = fn(this.elements[position + 1], val);\n    } else {\n      this.elements.splice(position, 0, insertIdx, val);\n    }\n  };\n  /**\n   * Calculates the magnitude of this vector.\n   *\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.magnitude = function () {\n    if (this._magnitude) return this._magnitude;\n    var sumOfSquares = 0,\n        elementsLength = this.elements.length;\n\n    for (var i = 1; i < elementsLength; i += 2) {\n      var val = this.elements[i];\n      sumOfSquares += val * val;\n    }\n\n    return this._magnitude = Math.sqrt(sumOfSquares);\n  };\n  /**\n   * Calculates the dot product of this vector and another vector.\n   *\n   * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.dot = function (otherVector) {\n    var dotProduct = 0,\n        a = this.elements,\n        b = otherVector.elements,\n        aLen = a.length,\n        bLen = b.length,\n        aVal = 0,\n        bVal = 0,\n        i = 0,\n        j = 0;\n\n    while (i < aLen && j < bLen) {\n      aVal = a[i], bVal = b[j];\n\n      if (aVal < bVal) {\n        i += 2;\n      } else if (aVal > bVal) {\n        j += 2;\n      } else if (aVal == bVal) {\n        dotProduct += a[i + 1] * b[j + 1];\n        i += 2;\n        j += 2;\n      }\n    }\n\n    return dotProduct;\n  };\n  /**\n   * Calculates the similarity between this vector and another vector.\n   *\n   * @param {lunr.Vector} otherVector - The other vector to calculate the\n   * similarity with.\n   * @returns {Number}\n   */\n\n\n  lunr.Vector.prototype.similarity = function (otherVector) {\n    return this.dot(otherVector) / this.magnitude() || 0;\n  };\n  /**\n   * Converts the vector to an array of the elements within the vector.\n   *\n   * @returns {Number[]}\n   */\n\n\n  lunr.Vector.prototype.toArray = function () {\n    var output = new Array(this.elements.length / 2);\n\n    for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n      output[j] = this.elements[i];\n    }\n\n    return output;\n  };\n  /**\n   * A JSON serializable representation of the vector.\n   *\n   * @returns {Number[]}\n   */\n\n\n  lunr.Vector.prototype.toJSON = function () {\n    return this.elements;\n  };\n  /* eslint-disable */\n\n  /*!\n   * lunr.stemmer\n   * Copyright (C) 2019 Oliver Nightingale\n   * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n   */\n\n  /**\n   * lunr.stemmer is an english language stemmer, this is a JavaScript\n   * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n   *\n   * @static\n   * @implements {lunr.PipelineFunction}\n   * @param {lunr.Token} token - The string to stem\n   * @returns {lunr.Token}\n   * @see {@link lunr.Pipeline}\n   * @function\n   */\n\n\n  lunr.stemmer = function () {\n    var step2list = {\n      \"ational\": \"ate\",\n      \"tional\": \"tion\",\n      \"enci\": \"ence\",\n      \"anci\": \"ance\",\n      \"izer\": \"ize\",\n      \"bli\": \"ble\",\n      \"alli\": \"al\",\n      \"entli\": \"ent\",\n      \"eli\": \"e\",\n      \"ousli\": \"ous\",\n      \"ization\": \"ize\",\n      \"ation\": \"ate\",\n      \"ator\": \"ate\",\n      \"alism\": \"al\",\n      \"iveness\": \"ive\",\n      \"fulness\": \"ful\",\n      \"ousness\": \"ous\",\n      \"aliti\": \"al\",\n      \"iviti\": \"ive\",\n      \"biliti\": \"ble\",\n      \"logi\": \"log\"\n    },\n        step3list = {\n      \"icate\": \"ic\",\n      \"ative\": \"\",\n      \"alize\": \"al\",\n      \"iciti\": \"ic\",\n      \"ical\": \"ic\",\n      \"ful\": \"\",\n      \"ness\": \"\"\n    },\n        c = \"[^aeiou]\",\n        // consonant\n    v = \"[aeiouy]\",\n        // vowel\n    C = c + \"[^aeiouy]*\",\n        // consonant sequence\n    V = v + \"[aeiou]*\",\n        // vowel sequence\n    mgr0 = \"^(\" + C + \")?\" + V + C,\n        // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",\n        // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,\n        // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v; // vowel in stem\n\n    var re_mgr0 = new RegExp(mgr0);\n    var re_mgr1 = new RegExp(mgr1);\n    var re_meq1 = new RegExp(meq1);\n    var re_s_v = new RegExp(s_v);\n    var re_1a = /^(.+?)(ss|i)es$/;\n    var re2_1a = /^(.+?)([^s])s$/;\n    var re_1b = /^(.+?)eed$/;\n    var re2_1b = /^(.+?)(ed|ing)$/;\n    var re_1b_2 = /.$/;\n    var re2_1b_2 = /(at|bl|iz)$/;\n    var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n    var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n    var re_1c = /^(.+?[^aeiou])y$/;\n    var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n    var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n    var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n    var re2_4 = /^(.+?)(s|t)(ion)$/;\n    var re_5 = /^(.+?)e$/;\n    var re_5_1 = /ll$/;\n    var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n    var porterStemmer = function porterStemmer(w) {\n      var stem, suffix, firstch, re, re2, re3, re4;\n\n      if (w.length < 3) {\n        return w;\n      }\n\n      firstch = w.substr(0, 1);\n\n      if (firstch == \"y\") {\n        w = firstch.toUpperCase() + w.substr(1);\n      } // Step 1a\n\n\n      re = re_1a;\n      re2 = re2_1a;\n\n      if (re.test(w)) {\n        w = w.replace(re, \"$1$2\");\n      } else if (re2.test(w)) {\n        w = w.replace(re2, \"$1$2\");\n      } // Step 1b\n\n\n      re = re_1b;\n      re2 = re2_1b;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        re = re_mgr0;\n\n        if (re.test(fp[1])) {\n          re = re_1b_2;\n          w = w.replace(re, \"\");\n        }\n      } else if (re2.test(w)) {\n        var fp = re2.exec(w);\n        stem = fp[1];\n        re2 = re_s_v;\n\n        if (re2.test(stem)) {\n          w = stem;\n          re2 = re2_1b_2;\n          re3 = re3_1b_2;\n          re4 = re4_1b_2;\n\n          if (re2.test(w)) {\n            w = w + \"e\";\n          } else if (re3.test(w)) {\n            re = re_1b_2;\n            w = w.replace(re, \"\");\n          } else if (re4.test(w)) {\n            w = w + \"e\";\n          }\n        }\n      } // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n\n\n      re = re_1c;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        w = stem + \"i\";\n      } // Step 2\n\n\n      re = re_2;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        suffix = fp[2];\n        re = re_mgr0;\n\n        if (re.test(stem)) {\n          w = stem + step2list[suffix];\n        }\n      } // Step 3\n\n\n      re = re_3;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        suffix = fp[2];\n        re = re_mgr0;\n\n        if (re.test(stem)) {\n          w = stem + step3list[suffix];\n        }\n      } // Step 4\n\n\n      re = re_4;\n      re2 = re2_4;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        re = re_mgr1;\n\n        if (re.test(stem)) {\n          w = stem;\n        }\n      } else if (re2.test(w)) {\n        var fp = re2.exec(w);\n        stem = fp[1] + fp[2];\n        re2 = re_mgr1;\n\n        if (re2.test(stem)) {\n          w = stem;\n        }\n      } // Step 5\n\n\n      re = re_5;\n\n      if (re.test(w)) {\n        var fp = re.exec(w);\n        stem = fp[1];\n        re = re_mgr1;\n        re2 = re_meq1;\n        re3 = re3_5;\n\n        if (re.test(stem) || re2.test(stem) && !re3.test(stem)) {\n          w = stem;\n        }\n      }\n\n      re = re_5_1;\n      re2 = re_mgr1;\n\n      if (re.test(w) && re2.test(w)) {\n        re = re_1b_2;\n        w = w.replace(re, \"\");\n      } // and turn initial Y back to y\n\n\n      if (firstch == \"y\") {\n        w = firstch.toLowerCase() + w.substr(1);\n      }\n\n      return w;\n    };\n\n    return function (token) {\n      return token.update(porterStemmer);\n    };\n  }();\n\n  lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer');\n  /*!\n   * lunr.stopWordFilter\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n   * list of stop words.\n   *\n   * The built in lunr.stopWordFilter is built using this generator and can be used\n   * to generate custom stopWordFilters for applications or non English languages.\n   *\n   * @function\n   * @param {Array} token The token to pass through the filter\n   * @returns {lunr.PipelineFunction}\n   * @see lunr.Pipeline\n   * @see lunr.stopWordFilter\n   */\n\n  lunr.generateStopWordFilter = function (stopWords) {\n    var words = stopWords.reduce(function (memo, stopWord) {\n      memo[stopWord] = stopWord;\n      return memo;\n    }, {});\n    return function (token) {\n      if (token && words[token.toString()] !== token.toString()) return token;\n    };\n  };\n  /**\n   * lunr.stopWordFilter is an English language stop word list filter, any words\n   * contained in the list will not be passed through the filter.\n   *\n   * This is intended to be used in the Pipeline. If the token does not pass the\n   * filter then undefined will be returned.\n   *\n   * @function\n   * @implements {lunr.PipelineFunction}\n   * @params {lunr.Token} token - A token to check for being a stop word.\n   * @returns {lunr.Token}\n   * @see {@link lunr.Pipeline}\n   */\n\n\n  lunr.stopWordFilter = lunr.generateStopWordFilter(['a', 'able', 'about', 'across', 'after', 'all', 'almost', 'also', 'am', 'among', 'an', 'and', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'but', 'by', 'can', 'cannot', 'could', 'dear', 'did', 'do', 'does', 'either', 'else', 'ever', 'every', 'for', 'from', 'get', 'got', 'had', 'has', 'have', 'he', 'her', 'hers', 'him', 'his', 'how', 'however', 'i', 'if', 'in', 'into', 'is', 'it', 'its', 'just', 'least', 'let', 'like', 'likely', 'may', 'me', 'might', 'most', 'must', 'my', 'neither', 'no', 'nor', 'not', 'of', 'off', 'often', 'on', 'only', 'or', 'other', 'our', 'own', 'rather', 'said', 'say', 'says', 'she', 'should', 'since', 'so', 'some', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'tis', 'to', 'too', 'twas', 'us', 'wants', 'was', 'we', 'were', 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'yet', 'you', 'your']);\n  lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter');\n  /*!\n   * lunr.trimmer\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * lunr.trimmer is a pipeline function for trimming non word\n   * characters from the beginning and end of tokens before they\n   * enter the index.\n   *\n   * This implementation may not work correctly for non latin\n   * characters and should either be removed or adapted for use\n   * with languages with non-latin characters.\n   *\n   * @static\n   * @implements {lunr.PipelineFunction}\n   * @param {lunr.Token} token The token to pass through the filter\n   * @returns {lunr.Token}\n   * @see lunr.Pipeline\n   */\n\n  lunr.trimmer = function (token) {\n    return token.update(function (s) {\n      return s.replace(/^\\W+/, '').replace(/\\W+$/, '');\n    });\n  };\n\n  lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer');\n  /*!\n   * lunr.TokenSet\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * A token set is used to store the unique list of all tokens\n   * within an index. Token sets are also used to represent an\n   * incoming query to the index, this query token set and index\n   * token set are then intersected to find which tokens to look\n   * up in the inverted index.\n   *\n   * A token set can hold multiple tokens, as in the case of the\n   * index token set, or it can hold a single token as in the\n   * case of a simple query token set.\n   *\n   * Additionally token sets are used to perform wildcard matching.\n   * Leading, contained and trailing wildcards are supported, and\n   * from this edit distance matching can also be provided.\n   *\n   * Token sets are implemented as a minimal finite state automata,\n   * where both common prefixes and suffixes are shared between tokens.\n   * This helps to reduce the space used for storing the token set.\n   *\n   * @constructor\n   */\n\n  lunr.TokenSet = function () {\n    this[\"final\"] = false;\n    this.edges = {};\n    this.id = lunr.TokenSet._nextId;\n    lunr.TokenSet._nextId += 1;\n  };\n  /**\n   * Keeps track of the next, auto increment, identifier to assign\n   * to a new tokenSet.\n   *\n   * TokenSets require a unique identifier to be correctly minimised.\n   *\n   * @private\n   */\n\n\n  lunr.TokenSet._nextId = 1;\n  /**\n   * Creates a TokenSet instance from the given sorted array of words.\n   *\n   * @param {String[]} arr - A sorted array of strings to create the set from.\n   * @returns {lunr.TokenSet}\n   * @throws Will throw an error if the input array is not sorted.\n   */\n\n  lunr.TokenSet.fromArray = function (arr) {\n    var builder = new lunr.TokenSet.Builder();\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      builder.insert(arr[i]);\n    }\n\n    builder.finish();\n    return builder.root;\n  };\n  /**\n   * Creates a token set from a query clause.\n   *\n   * @private\n   * @param {Object} clause - A single clause from lunr.Query.\n   * @param {string} clause.term - The query clause term.\n   * @param {number} [clause.editDistance] - The optional edit distance for the term.\n   * @returns {lunr.TokenSet}\n   */\n\n\n  lunr.TokenSet.fromClause = function (clause) {\n    if ('editDistance' in clause) {\n      return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance);\n    } else {\n      return lunr.TokenSet.fromString(clause.term);\n    }\n  };\n  /**\n   * Creates a token set representing a single string with a specified\n   * edit distance.\n   *\n   * Insertions, deletions, substitutions and transpositions are each\n   * treated as an edit distance of 1.\n   *\n   * Increasing the allowed edit distance will have a dramatic impact\n   * on the performance of both creating and intersecting these TokenSets.\n   * It is advised to keep the edit distance less than 3.\n   *\n   * @param {string} str - The string to create the token set from.\n   * @param {number} editDistance - The allowed edit distance to match.\n   * @returns {lunr.Vector}\n   */\n\n\n  lunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n    var root = new lunr.TokenSet();\n    var stack = [{\n      node: root,\n      editsRemaining: editDistance,\n      str: str\n    }];\n\n    while (stack.length) {\n      var frame = stack.pop(); // no edit\n\n      if (frame.str.length > 0) {\n        var _char2 = frame.str.charAt(0),\n            noEditNode;\n\n        if (_char2 in frame.node.edges) {\n          noEditNode = frame.node.edges[_char2];\n        } else {\n          noEditNode = new lunr.TokenSet();\n          frame.node.edges[_char2] = noEditNode;\n        }\n\n        if (frame.str.length == 1) {\n          noEditNode[\"final\"] = true;\n        }\n\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        });\n      }\n\n      if (frame.editsRemaining == 0) {\n        continue;\n      } // insertion\n\n\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"];\n      } else {\n        var insertionNode = new lunr.TokenSet();\n        frame.node.edges[\"*\"] = insertionNode;\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode[\"final\"] = true;\n      }\n\n      stack.push({\n        node: insertionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str\n      }); // deletion\n      // can only do a deletion if we have enough edits remaining\n      // and if there are characters left to delete in the string\n\n      if (frame.str.length > 1) {\n        stack.push({\n          node: frame.node,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        });\n      } // deletion\n      // just removing the last character from the str\n\n\n      if (frame.str.length == 1) {\n        frame.node[\"final\"] = true;\n      } // substitution\n      // can only do a substitution if we have enough edits remaining\n      // and if there are characters left to substitute\n\n\n      if (frame.str.length >= 1) {\n        if (\"*\" in frame.node.edges) {\n          var substitutionNode = frame.node.edges[\"*\"];\n        } else {\n          var substitutionNode = new lunr.TokenSet();\n          frame.node.edges[\"*\"] = substitutionNode;\n        }\n\n        if (frame.str.length == 1) {\n          substitutionNode[\"final\"] = true;\n        }\n\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        });\n      } // transposition\n      // can only do a transposition if there are edits remaining\n      // and there are enough characters to transpose\n\n\n      if (frame.str.length > 1) {\n        var charA = frame.str.charAt(0),\n            charB = frame.str.charAt(1),\n            transposeNode;\n\n        if (charB in frame.node.edges) {\n          transposeNode = frame.node.edges[charB];\n        } else {\n          transposeNode = new lunr.TokenSet();\n          frame.node.edges[charB] = transposeNode;\n        }\n\n        if (frame.str.length == 1) {\n          transposeNode[\"final\"] = true;\n        }\n\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        });\n      }\n    }\n\n    return root;\n  };\n  /**\n   * Creates a TokenSet from a string.\n   *\n   * The string may contain one or more wildcard characters (*)\n   * that will allow wildcard matching when intersecting with\n   * another TokenSet.\n   *\n   * @param {string} str - The string to create a TokenSet from.\n   * @returns {lunr.TokenSet}\n   */\n\n\n  lunr.TokenSet.fromString = function (str) {\n    var node = new lunr.TokenSet(),\n        root = node;\n    /*\n     * Iterates through all characters within the passed string\n     * appending a node for each character.\n     *\n     * When a wildcard character is found then a self\n     * referencing edge is introduced to continually match\n     * any number of any characters.\n     */\n\n    for (var i = 0, len = str.length; i < len; i++) {\n      var _char3 = str[i],\n          _final = i == len - 1;\n\n      if (_char3 == \"*\") {\n        node.edges[_char3] = node;\n        node[\"final\"] = _final;\n      } else {\n        var next = new lunr.TokenSet();\n        next[\"final\"] = _final;\n        node.edges[_char3] = next;\n        node = next;\n      }\n    }\n\n    return root;\n  };\n  /**\n   * Converts this TokenSet into an array of strings\n   * contained within the TokenSet.\n   *\n   * This is not intended to be used on a TokenSet that\n   * contains wildcards, in these cases the results are\n   * undefined and are likely to cause an infinite loop.\n   *\n   * @returns {string[]}\n   */\n\n\n  lunr.TokenSet.prototype.toArray = function () {\n    var words = [];\n    var stack = [{\n      prefix: \"\",\n      node: this\n    }];\n\n    while (stack.length) {\n      var frame = stack.pop(),\n          edges = Object.keys(frame.node.edges),\n          len = edges.length;\n\n      if (frame.node[\"final\"]) {\n        /* In Safari, at this point the prefix is sometimes corrupted, see:\n         * https://github.com/olivernn/lunr.js/issues/279 Calling any\n         * String.prototype method forces Safari to \"cast\" this string to what\n         * it's supposed to be, fixing the bug. */\n        frame.prefix.charAt(0);\n        words.push(frame.prefix);\n      }\n\n      for (var i = 0; i < len; i++) {\n        var edge = edges[i];\n        stack.push({\n          prefix: frame.prefix.concat(edge),\n          node: frame.node.edges[edge]\n        });\n      }\n    }\n\n    return words;\n  };\n  /**\n   * Generates a string representation of a TokenSet.\n   *\n   * This is intended to allow TokenSets to be used as keys\n   * in objects, largely to aid the construction and minimisation\n   * of a TokenSet. As such it is not designed to be a human\n   * friendly representation of the TokenSet.\n   *\n   * @returns {string}\n   */\n\n\n  lunr.TokenSet.prototype.toString = function () {\n    // NOTE: Using Object.keys here as this.edges is very likely\n    // to enter 'hash-mode' with many keys being added\n    //\n    // avoiding a for-in loop here as it leads to the function\n    // being de-optimised (at least in V8). From some simple\n    // benchmarks the performance is comparable, but allowing\n    // V8 to optimize may mean easy performance wins in the future.\n    if (this._str) {\n      return this._str;\n    }\n\n    var str = this[\"final\"] ? '1' : '0',\n        labels = Object.keys(this.edges).sort(),\n        len = labels.length;\n\n    for (var i = 0; i < len; i++) {\n      var label = labels[i],\n          node = this.edges[label];\n      str = str + label + node.id;\n    }\n\n    return str;\n  };\n  /**\n   * Returns a new TokenSet that is the intersection of\n   * this TokenSet and the passed TokenSet.\n   *\n   * This intersection will take into account any wildcards\n   * contained within the TokenSet.\n   *\n   * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n   * @returns {lunr.TokenSet}\n   */\n\n\n  lunr.TokenSet.prototype.intersect = function (b) {\n    var output = new lunr.TokenSet(),\n        frame = undefined;\n    var stack = [{\n      qNode: b,\n      output: output,\n      node: this\n    }];\n\n    while (stack.length) {\n      frame = stack.pop(); // NOTE: As with the #toString method, we are using\n      // Object.keys and a for loop instead of a for-in loop\n      // as both of these objects enter 'hash' mode, causing\n      // the function to be de-optimised in V8\n\n      var qEdges = Object.keys(frame.qNode.edges),\n          qLen = qEdges.length,\n          nEdges = Object.keys(frame.node.edges),\n          nLen = nEdges.length;\n\n      for (var q = 0; q < qLen; q++) {\n        var qEdge = qEdges[q];\n\n        for (var n = 0; n < nLen; n++) {\n          var nEdge = nEdges[n];\n\n          if (nEdge == qEdge || qEdge == '*') {\n            var node = frame.node.edges[nEdge],\n                qNode = frame.qNode.edges[qEdge],\n                _final2 = node[\"final\"] && qNode[\"final\"],\n                next = undefined;\n\n            if (nEdge in frame.output.edges) {\n              // an edge already exists for this character\n              // no need to create a new node, just set the finality\n              // bit unless this node is already final\n              next = frame.output.edges[nEdge];\n              next[\"final\"] = next[\"final\"] || _final2;\n            } else {\n              // no edge exists yet, must create one\n              // set the finality bit and insert it\n              // into the output\n              next = new lunr.TokenSet();\n              next[\"final\"] = _final2;\n              frame.output.edges[nEdge] = next;\n            }\n\n            stack.push({\n              qNode: qNode,\n              output: next,\n              node: node\n            });\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n\n  lunr.TokenSet.Builder = function () {\n    this.previousWord = \"\";\n    this.root = new lunr.TokenSet();\n    this.uncheckedNodes = [];\n    this.minimizedNodes = {};\n  };\n\n  lunr.TokenSet.Builder.prototype.insert = function (word) {\n    var node,\n        commonPrefix = 0;\n\n    if (word < this.previousWord) {\n      throw new Error(\"Out of order word insertion\");\n    }\n\n    for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n      if (word[i] != this.previousWord[i]) break;\n      commonPrefix++;\n    }\n\n    this.minimize(commonPrefix);\n\n    if (this.uncheckedNodes.length == 0) {\n      node = this.root;\n    } else {\n      node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child;\n    }\n\n    for (var i = commonPrefix; i < word.length; i++) {\n      var nextNode = new lunr.TokenSet(),\n          _char4 = word[i];\n      node.edges[_char4] = nextNode;\n      this.uncheckedNodes.push({\n        parent: node,\n        \"char\": _char4,\n        child: nextNode\n      });\n      node = nextNode;\n    }\n\n    node[\"final\"] = true;\n    this.previousWord = word;\n  };\n\n  lunr.TokenSet.Builder.prototype.finish = function () {\n    this.minimize(0);\n  };\n\n  lunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n    for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n      var node = this.uncheckedNodes[i],\n          childKey = node.child.toString();\n\n      if (childKey in this.minimizedNodes) {\n        node.parent.edges[node[\"char\"]] = this.minimizedNodes[childKey];\n      } else {\n        // Cache the key for this node since\n        // we know it can't change anymore\n        node.child._str = childKey;\n        this.minimizedNodes[childKey] = node.child;\n      }\n\n      this.uncheckedNodes.pop();\n    }\n  };\n  /*!\n   * lunr.Index\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * An index contains the built index of all documents and provides a query interface\n   * to the index.\n   *\n   * Usually instances of lunr.Index will not be created using this constructor, instead\n   * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n   * used to load previously built and serialized indexes.\n   *\n   * @constructor\n   * @param {Object} attrs - The attributes of the built search index.\n   * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n   * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n   * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n   * @param {string[]} attrs.fields - The names of indexed document fields.\n   * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n   */\n\n\n  lunr.Index = function (attrs) {\n    this.invertedIndex = attrs.invertedIndex;\n    this.fieldVectors = attrs.fieldVectors;\n    this.tokenSet = attrs.tokenSet;\n    this.fields = attrs.fields;\n    this.pipeline = attrs.pipeline;\n  };\n  /**\n   * A result contains details of a document matching a search query.\n   * @typedef {Object} lunr.Index~Result\n   * @property {string} ref - The reference of the document this result represents.\n   * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n   * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n   */\n\n  /**\n   * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n   * query language which itself is parsed into an instance of lunr.Query.\n   *\n   * For programmatically building queries it is advised to directly use lunr.Query, the query language\n   * is best used for human entered text rather than program generated text.\n   *\n   * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n   * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n   * or 'world', though those that contain both will rank higher in the results.\n   *\n   * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n   * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n   * wildcards will increase the number of documents that will be found but can also have a negative\n   * impact on query performance, especially with wildcards at the beginning of a term.\n   *\n   * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n   * hello in the title field will match this query. Using a field not present in the index will lead\n   * to an error being thrown.\n   *\n   * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n   * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n   * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n   * Avoid large values for edit distance to improve query performance.\n   *\n   * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n   * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n   * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n   * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n   * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n   *\n   * To escape special characters the backslash character '\\' can be used, this allows searches to include\n   * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n   * of attempting to apply a boost of 2 to the search term \"foo\".\n   *\n   * @typedef {string} lunr.Index~QueryString\n   * @example <caption>Simple single term query</caption>\n   * hello\n   * @example <caption>Multiple term query</caption>\n   * hello world\n   * @example <caption>term scoped to a field</caption>\n   * title:hello\n   * @example <caption>term with a boost of 10</caption>\n   * hello^10\n   * @example <caption>term with an edit distance of 2</caption>\n   * hello~2\n   * @example <caption>terms with presence modifiers</caption>\n   * -foo +bar baz\n   */\n\n  /**\n   * Performs a search against the index using lunr query syntax.\n   *\n   * Results will be returned sorted by their score, the most relevant results\n   * will be returned first.  For details on how the score is calculated, please see\n   * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n   *\n   * For more programmatic querying use lunr.Index#query.\n   *\n   * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n   * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n   * @returns {lunr.Index~Result[]}\n   */\n\n\n  lunr.Index.prototype.search = function (queryString) {\n    return this.query(function (query) {\n      var parser = new lunr.QueryParser(queryString, query);\n      parser.parse();\n    });\n  };\n  /**\n   * A query builder callback provides a query object to be used to express\n   * the query to perform on the index.\n   *\n   * @callback lunr.Index~queryBuilder\n   * @param {lunr.Query} query - The query object to build up.\n   * @this lunr.Query\n   */\n\n  /**\n   * Performs a query against the index using the yielded lunr.Query object.\n   *\n   * If performing programmatic queries against the index, this method is preferred\n   * over lunr.Index#search so as to avoid the additional query parsing overhead.\n   *\n   * A query object is yielded to the supplied function which should be used to\n   * express the query to be run against the index.\n   *\n   * Note that although this function takes a callback parameter it is _not_ an\n   * asynchronous operation, the callback is just yielded a query object to be\n   * customized.\n   *\n   * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n   * @returns {lunr.Index~Result[]}\n   */\n\n\n  lunr.Index.prototype.query = function (fn) {\n    // for each query clause\n    // * process terms\n    // * expand terms from token set\n    // * find matching documents and metadata\n    // * get document vectors\n    // * score documents\n    var query = new lunr.Query(this.fields),\n        matchingFields = Object.create(null),\n        queryVectors = Object.create(null),\n        termFieldCache = Object.create(null),\n        requiredMatches = Object.create(null),\n        prohibitedMatches = Object.create(null);\n    /*\n     * To support field level boosts a query vector is created per\n     * field. An empty vector is eagerly created to support negated\n     * queries.\n     */\n\n    for (var i = 0; i < this.fields.length; i++) {\n      queryVectors[this.fields[i]] = new lunr.Vector();\n    }\n\n    fn.call(query, query);\n\n    for (var i = 0; i < query.clauses.length; i++) {\n      /*\n       * Unless the pipeline has been disabled for this term, which is\n       * the case for terms with wildcards, we need to pass the clause\n       * term through the search pipeline. A pipeline returns an array\n       * of processed terms. Pipeline functions may expand the passed\n       * term, which means we may end up performing multiple index lookups\n       * for a single query term.\n       */\n      var clause = query.clauses[i],\n          terms = null,\n          clauseMatches = lunr.Set.complete;\n\n      if (clause.usePipeline) {\n        terms = this.pipeline.runString(clause.term, {\n          fields: clause.fields\n        });\n      } else {\n        terms = [clause.term];\n      }\n\n      for (var m = 0; m < terms.length; m++) {\n        var term = terms[m];\n        /*\n         * Each term returned from the pipeline needs to use the same query\n         * clause object, e.g. the same boost and or edit distance. The\n         * simplest way to do this is to re-use the clause object but mutate\n         * its term property.\n         */\n\n        clause.term = term;\n        /*\n         * From the term in the clause we create a token set which will then\n         * be used to intersect the indexes token set to get a list of terms\n         * to lookup in the inverted index\n         */\n\n        var termTokenSet = lunr.TokenSet.fromClause(clause),\n            expandedTerms = this.tokenSet.intersect(termTokenSet).toArray();\n        /*\n         * If a term marked as required does not exist in the tokenSet it is\n         * impossible for the search to return any matches. We set all the field\n         * scoped required matches set to empty and stop examining any further\n         * clauses.\n         */\n\n        if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n          for (var k = 0; k < clause.fields.length; k++) {\n            var field = clause.fields[k];\n            requiredMatches[field] = lunr.Set.empty;\n          }\n\n          break;\n        }\n\n        for (var j = 0; j < expandedTerms.length; j++) {\n          /*\n           * For each term get the posting and termIndex, this is required for\n           * building the query vector.\n           */\n          var expandedTerm = expandedTerms[j],\n              posting = this.invertedIndex[expandedTerm],\n              termIndex = posting._index;\n\n          for (var k = 0; k < clause.fields.length; k++) {\n            /*\n             * For each field that this query term is scoped by (by default\n             * all fields are in scope) we need to get all the document refs\n             * that have this term in that field.\n             *\n             * The posting is the entry in the invertedIndex for the matching\n             * term from above.\n             */\n            var field = clause.fields[k],\n                fieldPosting = posting[field],\n                matchingDocumentRefs = Object.keys(fieldPosting),\n                termField = expandedTerm + \"/\" + field,\n                matchingDocumentsSet = new lunr.Set(matchingDocumentRefs);\n            /*\n             * if the presence of this term is required ensure that the matching\n             * documents are added to the set of required matches for this clause.\n             *\n             */\n\n            if (clause.presence == lunr.Query.presence.REQUIRED) {\n              clauseMatches = clauseMatches.union(matchingDocumentsSet);\n\n              if (requiredMatches[field] === undefined) {\n                requiredMatches[field] = lunr.Set.complete;\n              }\n            }\n            /*\n             * if the presence of this term is prohibited ensure that the matching\n             * documents are added to the set of prohibited matches for this field,\n             * creating that set if it does not yet exist.\n             */\n\n\n            if (clause.presence == lunr.Query.presence.PROHIBITED) {\n              if (prohibitedMatches[field] === undefined) {\n                prohibitedMatches[field] = lunr.Set.empty;\n              }\n\n              prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet);\n              /*\n               * Prohibited matches should not be part of the query vector used for\n               * similarity scoring and no metadata should be extracted so we continue\n               * to the next field\n               */\n\n              continue;\n            }\n            /*\n             * The query field vector is populated using the termIndex found for\n             * the term and a unit value with the appropriate boost applied.\n             * Using upsert because there could already be an entry in the vector\n             * for the term we are working with. In that case we just add the scores\n             * together.\n             */\n\n\n            queryVectors[field].upsert(termIndex, clause.boost, function (a, b) {\n              return a + b;\n            });\n            /**\n             * If we've already seen this term, field combo then we've already collected\n             * the matching documents and metadata, no need to go through all that again\n             */\n\n            if (termFieldCache[termField]) {\n              continue;\n            }\n\n            for (var l = 0; l < matchingDocumentRefs.length; l++) {\n              /*\n               * All metadata for this term/field/document triple\n               * are then extracted and collected into an instance\n               * of lunr.MatchData ready to be returned in the query\n               * results\n               */\n              var matchingDocumentRef = matchingDocumentRefs[l],\n                  matchingFieldRef = new lunr.FieldRef(matchingDocumentRef, field),\n                  metadata = fieldPosting[matchingDocumentRef],\n                  fieldMatch;\n\n              if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n                matchingFields[matchingFieldRef] = new lunr.MatchData(expandedTerm, field, metadata);\n              } else {\n                fieldMatch.add(expandedTerm, field, metadata);\n              }\n            }\n\n            termFieldCache[termField] = true;\n          }\n        }\n      }\n      /**\n       * If the presence was required we need to update the requiredMatches field sets.\n       * We do this after all fields for the term have collected their matches because\n       * the clause terms presence is required in _any_ of the fields not _all_ of the\n       * fields.\n       */\n\n\n      if (clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k];\n          requiredMatches[field] = requiredMatches[field].intersect(clauseMatches);\n        }\n      }\n    }\n    /**\n     * Need to combine the field scoped required and prohibited\n     * matching documents into a global set of required and prohibited\n     * matches\n     */\n\n\n    var allRequiredMatches = lunr.Set.complete,\n        allProhibitedMatches = lunr.Set.empty;\n\n    for (var i = 0; i < this.fields.length; i++) {\n      var field = this.fields[i];\n\n      if (requiredMatches[field]) {\n        allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field]);\n      }\n\n      if (prohibitedMatches[field]) {\n        allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field]);\n      }\n    }\n\n    var matchingFieldRefs = Object.keys(matchingFields),\n        results = [],\n        matches = Object.create(null);\n    /*\n     * If the query is negated (contains only prohibited terms)\n     * we need to get _all_ fieldRefs currently existing in the\n     * index. This is only done when we know that the query is\n     * entirely prohibited terms to avoid any cost of getting all\n     * fieldRefs unnecessarily.\n     *\n     * Additionally, blank MatchData must be created to correctly\n     * populate the results.\n     */\n\n    if (query.isNegated()) {\n      matchingFieldRefs = Object.keys(this.fieldVectors);\n\n      for (var i = 0; i < matchingFieldRefs.length; i++) {\n        var matchingFieldRef = matchingFieldRefs[i];\n        var fieldRef = lunr.FieldRef.fromString(matchingFieldRef);\n        matchingFields[matchingFieldRef] = new lunr.MatchData();\n      }\n    }\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      /*\n       * Currently we have document fields that match the query, but we\n       * need to return documents. The matchData and scores are combined\n       * from multiple fields belonging to the same document.\n       *\n       * Scores are calculated by field, using the query vectors created\n       * above, and combined into a final document score using addition.\n       */\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n          docRef = fieldRef.docRef;\n\n      if (!allRequiredMatches.contains(docRef)) {\n        continue;\n      }\n\n      if (allProhibitedMatches.contains(docRef)) {\n        continue;\n      }\n\n      var fieldVector = this.fieldVectors[fieldRef],\n          score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n          docMatch;\n\n      if ((docMatch = matches[docRef]) !== undefined) {\n        docMatch.score += score;\n        docMatch.matchData.combine(matchingFields[fieldRef]);\n      } else {\n        var match = {\n          ref: docRef,\n          score: score,\n          matchData: matchingFields[fieldRef]\n        };\n        matches[docRef] = match;\n        results.push(match);\n      }\n    }\n    /*\n     * Sort the results objects by score, highest first.\n     */\n\n\n    return results.sort(function (a, b) {\n      return b.score - a.score;\n    });\n  };\n  /**\n   * Prepares the index for JSON serialization.\n   *\n   * The schema for this JSON blob will be described in a\n   * separate JSON schema file.\n   *\n   * @returns {Object}\n   */\n\n\n  lunr.Index.prototype.toJSON = function () {\n    var invertedIndex = Object.keys(this.invertedIndex).sort().map(function (term) {\n      return [term, this.invertedIndex[term]];\n    }, this);\n    var fieldVectors = Object.keys(this.fieldVectors).map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()];\n    }, this);\n    return {\n      version: lunr.version,\n      fields: this.fields,\n      fieldVectors: fieldVectors,\n      invertedIndex: invertedIndex,\n      pipeline: this.pipeline.toJSON()\n    };\n  };\n  /**\n   * Loads a previously serialized lunr.Index\n   *\n   * @param {Object} serializedIndex - A previously serialized lunr.Index\n   * @returns {lunr.Index}\n   */\n\n\n  lunr.Index.load = function (serializedIndex) {\n    var attrs = {},\n        fieldVectors = {},\n        serializedVectors = serializedIndex.fieldVectors,\n        invertedIndex = Object.create(null),\n        serializedInvertedIndex = serializedIndex.invertedIndex,\n        tokenSetBuilder = new lunr.TokenSet.Builder(),\n        pipeline = lunr.Pipeline.load(serializedIndex.pipeline);\n\n    if (serializedIndex.version != lunr.version) {\n      lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\");\n    }\n\n    for (var i = 0; i < serializedVectors.length; i++) {\n      var tuple = serializedVectors[i],\n          ref = tuple[0],\n          elements = tuple[1];\n      fieldVectors[ref] = new lunr.Vector(elements);\n    }\n\n    for (var i = 0; i < serializedInvertedIndex.length; i++) {\n      var tuple = serializedInvertedIndex[i],\n          term = tuple[0],\n          posting = tuple[1];\n      tokenSetBuilder.insert(term);\n      invertedIndex[term] = posting;\n    }\n\n    tokenSetBuilder.finish();\n    attrs.fields = serializedIndex.fields;\n    attrs.fieldVectors = fieldVectors;\n    attrs.invertedIndex = invertedIndex;\n    attrs.tokenSet = tokenSetBuilder.root;\n    attrs.pipeline = pipeline;\n    return new lunr.Index(attrs);\n  };\n  /*!\n   * lunr.Builder\n   * Copyright (C) 2019 Oliver Nightingale\n   */\n\n  /**\n   * lunr.Builder performs indexing on a set of documents and\n   * returns instances of lunr.Index ready for querying.\n   *\n   * All configuration of the index is done via the builder, the\n   * fields to index, the document reference, the text processing\n   * pipeline and document scoring parameters are all set on the\n   * builder before indexing.\n   *\n   * @constructor\n   * @property {string} _ref - Internal reference to the document reference field.\n   * @property {string[]} _fields - Internal reference to the document fields to index.\n   * @property {object} invertedIndex - The inverted index maps terms to document fields.\n   * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n   * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n   * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n   * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n   * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n   * @property {number} documentCount - Keeps track of the total number of documents indexed.\n   * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n   * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n   * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n   * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n   */\n\n\n  lunr.Builder = function () {\n    this._ref = \"id\";\n    this._fields = Object.create(null);\n    this._documents = Object.create(null);\n    this.invertedIndex = Object.create(null);\n    this.fieldTermFrequencies = {};\n    this.fieldLengths = {};\n    this.tokenizer = lunr.tokenizer;\n    this.pipeline = new lunr.Pipeline();\n    this.searchPipeline = new lunr.Pipeline();\n    this.documentCount = 0;\n    this._b = 0.75;\n    this._k1 = 1.2;\n    this.termIndex = 0;\n    this.metadataWhitelist = [];\n  };\n  /**\n   * Sets the document field used as the document reference. Every document must have this field.\n   * The type of this field in the document should be a string, if it is not a string it will be\n   * coerced into a string by calling toString.\n   *\n   * The default ref is 'id'.\n   *\n   * The ref should _not_ be changed during indexing, it should be set before any documents are\n   * added to the index. Changing it during indexing can lead to inconsistent results.\n   *\n   * @param {string} ref - The name of the reference field in the document.\n   */\n\n\n  lunr.Builder.prototype.ref = function (ref) {\n    this._ref = ref;\n  };\n  /**\n   * A function that is used to extract a field from a document.\n   *\n   * Lunr expects a field to be at the top level of a document, if however the field\n   * is deeply nested within a document an extractor function can be used to extract\n   * the right field for indexing.\n   *\n   * @callback fieldExtractor\n   * @param {object} doc - The document being added to the index.\n   * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n   * @example <caption>Extracting a nested field</caption>\n   * function (doc) { return doc.nested.field }\n   */\n\n  /**\n   * Adds a field to the list of document fields that will be indexed. Every document being\n   * indexed should have this field. Null values for this field in indexed documents will\n   * not cause errors but will limit the chance of that document being retrieved by searches.\n   *\n   * All fields should be added before adding documents to the index. Adding fields after\n   * a document has been indexed will have no effect on already indexed documents.\n   *\n   * Fields can be boosted at build time. This allows terms within that field to have more\n   * importance when ranking search results. Use a field boost to specify that matches within\n   * one field are more important than other fields.\n   *\n   * @param {string} fieldName - The name of a field to index in all documents.\n   * @param {object} attributes - Optional attributes associated with this field.\n   * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n   * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n   * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n   */\n\n\n  lunr.Builder.prototype.field = function (fieldName, attributes) {\n    if (/\\//.test(fieldName)) {\n      throw new RangeError(\"Field '\" + fieldName + \"' contains illegal character '/'\");\n    }\n\n    this._fields[fieldName] = attributes || {};\n  };\n  /**\n   * A parameter to tune the amount of field length normalisation that is applied when\n   * calculating relevance scores. A value of 0 will completely disable any normalisation\n   * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n   * will be clamped to the range 0 - 1.\n   *\n   * @param {number} number - The value to set for this tuning parameter.\n   */\n\n\n  lunr.Builder.prototype.b = function (number) {\n    if (number < 0) {\n      this._b = 0;\n    } else if (number > 1) {\n      this._b = 1;\n    } else {\n      this._b = number;\n    }\n  };\n  /**\n   * A parameter that controls the speed at which a rise in term frequency results in term\n   * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n   * slower saturation levels, a lower value will result in quicker saturation.\n   *\n   * @param {number} number - The value to set for this tuning parameter.\n   */\n\n\n  lunr.Builder.prototype.k1 = function (number) {\n    this._k1 = number;\n  };\n  /**\n   * Adds a document to the index.\n   *\n   * Before adding fields to the index the index should have been fully setup, with the document\n   * ref and all fields to index already having been specified.\n   *\n   * The document must have a field name as specified by the ref (by default this is 'id') and\n   * it should have all fields defined for indexing, though null or undefined values will not\n   * cause errors.\n   *\n   * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n   * this document should rank higher in search results than other documents.\n   *\n   * @param {object} doc - The document to add to the index.\n   * @param {object} attributes - Optional attributes associated with this document.\n   * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n   */\n\n\n  lunr.Builder.prototype.add = function (doc, attributes) {\n    var docRef = doc[this._ref],\n        fields = Object.keys(this._fields);\n    this._documents[docRef] = attributes || {};\n    this.documentCount += 1;\n\n    for (var i = 0; i < fields.length; i++) {\n      var fieldName = fields[i],\n          extractor = this._fields[fieldName].extractor,\n          field = extractor ? extractor(doc) : doc[fieldName],\n          tokens = this.tokenizer(field, {\n        fields: [fieldName]\n      }),\n          terms = this.pipeline.run(tokens),\n          fieldRef = new lunr.FieldRef(docRef, fieldName),\n          fieldTerms = Object.create(null);\n      this.fieldTermFrequencies[fieldRef] = fieldTerms;\n      this.fieldLengths[fieldRef] = 0; // store the length of this field for this document\n\n      this.fieldLengths[fieldRef] += terms.length; // calculate term frequencies for this field\n\n      for (var j = 0; j < terms.length; j++) {\n        var term = terms[j];\n\n        if (fieldTerms[term] == undefined) {\n          fieldTerms[term] = 0;\n        }\n\n        fieldTerms[term] += 1; // add to inverted index\n        // create an initial posting if one doesn't exist\n\n        if (this.invertedIndex[term] == undefined) {\n          var posting = Object.create(null);\n          posting[\"_index\"] = this.termIndex;\n          this.termIndex += 1;\n\n          for (var k = 0; k < fields.length; k++) {\n            posting[fields[k]] = Object.create(null);\n          }\n\n          this.invertedIndex[term] = posting;\n        } // add an entry for this term/fieldName/docRef to the invertedIndex\n\n\n        if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n          this.invertedIndex[term][fieldName][docRef] = Object.create(null);\n        } // store all whitelisted metadata about this token in the\n        // inverted index\n\n\n        for (var l = 0; l < this.metadataWhitelist.length; l++) {\n          var metadataKey = this.metadataWhitelist[l],\n              metadata = term.metadata[metadataKey];\n\n          if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n            this.invertedIndex[term][fieldName][docRef][metadataKey] = [];\n          }\n\n          this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata);\n        }\n      }\n    }\n  };\n  /**\n   * Calculates the average document length for this index\n   *\n   * @private\n   */\n\n\n  lunr.Builder.prototype.calculateAverageFieldLengths = function () {\n    var fieldRefs = Object.keys(this.fieldLengths),\n        numberOfFields = fieldRefs.length,\n        accumulator = {},\n        documentsWithField = {};\n\n    for (var i = 0; i < numberOfFields; i++) {\n      var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n          field = fieldRef.fieldName;\n      documentsWithField[field] || (documentsWithField[field] = 0);\n      documentsWithField[field] += 1;\n      accumulator[field] || (accumulator[field] = 0);\n      accumulator[field] += this.fieldLengths[fieldRef];\n    }\n\n    var fields = Object.keys(this._fields);\n\n    for (var i = 0; i < fields.length; i++) {\n      var fieldName = fields[i];\n      accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName];\n    }\n\n    this.averageFieldLength = accumulator;\n  };\n  /**\n   * Builds a vector space model of every document using lunr.Vector\n   *\n   * @private\n   */\n\n\n  lunr.Builder.prototype.createFieldVectors = function () {\n    var fieldVectors = {},\n        fieldRefs = Object.keys(this.fieldTermFrequencies),\n        fieldRefsLength = fieldRefs.length,\n        termIdfCache = Object.create(null);\n\n    for (var i = 0; i < fieldRefsLength; i++) {\n      var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n          fieldName = fieldRef.fieldName,\n          fieldLength = this.fieldLengths[fieldRef],\n          fieldVector = new lunr.Vector(),\n          termFrequencies = this.fieldTermFrequencies[fieldRef],\n          terms = Object.keys(termFrequencies),\n          termsLength = terms.length;\n      var fieldBoost = this._fields[fieldName].boost || 1,\n          docBoost = this._documents[fieldRef.docRef].boost || 1;\n\n      for (var j = 0; j < termsLength; j++) {\n        var term = terms[j],\n            tf = termFrequencies[term],\n            termIndex = this.invertedIndex[term]._index,\n            idf,\n            score,\n            scoreWithPrecision;\n\n        if (termIdfCache[term] === undefined) {\n          idf = lunr.idf(this.invertedIndex[term], this.documentCount);\n          termIdfCache[term] = idf;\n        } else {\n          idf = termIdfCache[term];\n        }\n\n        score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf);\n        score *= fieldBoost;\n        score *= docBoost;\n        scoreWithPrecision = Math.round(score * 1000) / 1000; // Converts 1.23456789 to 1.234.\n        // Reducing the precision so that the vectors take up less\n        // space when serialised. Doing it now so that they behave\n        // the same before and after serialisation. Also, this is\n        // the fastest approach to reducing a number's precision in\n        // JavaScript.\n\n        fieldVector.insert(termIndex, scoreWithPrecision);\n      }\n\n      fieldVectors[fieldRef] = fieldVector;\n    }\n\n    this.fieldVectors = fieldVectors;\n  };\n  /**\n   * Creates a token set of all tokens in the index using lunr.TokenSet\n   *\n   * @private\n   */\n\n\n  lunr.Builder.prototype.createTokenSet = function () {\n    this.tokenSet = lunr.TokenSet.fromArray(Object.keys(this.invertedIndex).sort());\n  };\n  /**\n   * Builds the index, creating an instance of lunr.Index.\n   *\n   * This completes the indexing process and should only be called\n   * once all documents have been added to the index.\n   *\n   * @returns {lunr.Index}\n   */\n\n\n  lunr.Builder.prototype.build = function () {\n    this.calculateAverageFieldLengths();\n    this.createFieldVectors();\n    this.createTokenSet();\n    return new lunr.Index({\n      invertedIndex: this.invertedIndex,\n      fieldVectors: this.fieldVectors,\n      tokenSet: this.tokenSet,\n      fields: Object.keys(this._fields),\n      pipeline: this.searchPipeline\n    });\n  };\n  /**\n   * Applies a plugin to the index builder.\n   *\n   * A plugin is a function that is called with the index builder as its context.\n   * Plugins can be used to customise or extend the behaviour of the index\n   * in some way. A plugin is just a function, that encapsulated the custom\n   * behaviour that should be applied when building the index.\n   *\n   * The plugin function will be called with the index builder as its argument, additional\n   * arguments can also be passed when calling use. The function will be called\n   * with the index builder as its context.\n   *\n   * @param {Function} plugin The plugin to apply.\n   */\n\n\n  lunr.Builder.prototype.use = function (fn) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    args.unshift(this);\n    fn.apply(this, args);\n  };\n  /**\n   * Contains and collects metadata about a matching document.\n   * A single instance of lunr.MatchData is returned as part of every\n   * lunr.Index~Result.\n   *\n   * @constructor\n   * @param {string} term - The term this match data is associated with\n   * @param {string} field - The field in which the term was found\n   * @param {object} metadata - The metadata recorded about this term in this field\n   * @property {object} metadata - A cloned collection of metadata associated with this document.\n   * @see {@link lunr.Index~Result}\n   */\n\n\n  lunr.MatchData = function (term, field, metadata) {\n    var clonedMetadata = Object.create(null),\n        metadataKeys = Object.keys(metadata || {}); // Cloning the metadata to prevent the original\n    // being mutated during match data combination.\n    // Metadata is kept in an array within the inverted\n    // index so cloning the data can be done with\n    // Array#slice\n\n    for (var i = 0; i < metadataKeys.length; i++) {\n      var key = metadataKeys[i];\n      clonedMetadata[key] = metadata[key].slice();\n    }\n\n    this.metadata = Object.create(null);\n\n    if (term !== undefined) {\n      this.metadata[term] = Object.create(null);\n      this.metadata[term][field] = clonedMetadata;\n    }\n  };\n  /**\n   * An instance of lunr.MatchData will be created for every term that matches a\n   * document. However only one instance is required in a lunr.Index~Result. This\n   * method combines metadata from another instance of lunr.MatchData with this\n   * objects metadata.\n   *\n   * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n   * @see {@link lunr.Index~Result}\n   */\n\n\n  lunr.MatchData.prototype.combine = function (otherMatchData) {\n    var terms = Object.keys(otherMatchData.metadata);\n\n    for (var i = 0; i < terms.length; i++) {\n      var term = terms[i],\n          fields = Object.keys(otherMatchData.metadata[term]);\n\n      if (this.metadata[term] == undefined) {\n        this.metadata[term] = Object.create(null);\n      }\n\n      for (var j = 0; j < fields.length; j++) {\n        var field = fields[j],\n            keys = Object.keys(otherMatchData.metadata[term][field]);\n\n        if (this.metadata[term][field] == undefined) {\n          this.metadata[term][field] = Object.create(null);\n        }\n\n        for (var k = 0; k < keys.length; k++) {\n          var key = keys[k];\n\n          if (this.metadata[term][field][key] == undefined) {\n            this.metadata[term][field][key] = otherMatchData.metadata[term][field][key];\n          } else {\n            this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key]);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Add metadata for a term/field pair to this instance of match data.\n   *\n   * @param {string} term - The term this match data is associated with\n   * @param {string} field - The field in which the term was found\n   * @param {object} metadata - The metadata recorded about this term in this field\n   */\n\n\n  lunr.MatchData.prototype.add = function (term, field, metadata) {\n    if (!(term in this.metadata)) {\n      this.metadata[term] = Object.create(null);\n      this.metadata[term][field] = metadata;\n      return;\n    }\n\n    if (!(field in this.metadata[term])) {\n      this.metadata[term][field] = metadata;\n      return;\n    }\n\n    var metadataKeys = Object.keys(metadata);\n\n    for (var i = 0; i < metadataKeys.length; i++) {\n      var key = metadataKeys[i];\n\n      if (key in this.metadata[term][field]) {\n        this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key]);\n      } else {\n        this.metadata[term][field][key] = metadata[key];\n      }\n    }\n  };\n  /**\n   * A lunr.Query provides a programmatic way of defining queries to be performed\n   * against a {@link lunr.Index}.\n   *\n   * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n   * so the query object is pre-initialized with the right index fields.\n   *\n   * @constructor\n   * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n   * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n   */\n\n\n  lunr.Query = function (allFields) {\n    this.clauses = [];\n    this.allFields = allFields;\n  };\n  /**\n   * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n   *\n   * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n   * concatenation.\n   *\n   * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n   *\n   * @constant\n   * @default\n   * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n   * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n   * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n   * @see lunr.Query~Clause\n   * @see lunr.Query#clause\n   * @see lunr.Query#term\n   * @example <caption>query term with trailing wildcard</caption>\n   * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n   * @example <caption>query term with leading and trailing wildcard</caption>\n   * query.term('foo', {\n   *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n   * })\n   */\n\n\n  lunr.Query.wildcard = new String(\"*\");\n  lunr.Query.wildcard.NONE = 0;\n  lunr.Query.wildcard.LEADING = 1;\n  lunr.Query.wildcard.TRAILING = 2;\n  /**\n   * Constants for indicating what kind of presence a term must have in matching documents.\n   *\n   * @constant\n   * @enum {number}\n   * @see lunr.Query~Clause\n   * @see lunr.Query#clause\n   * @see lunr.Query#term\n   * @example <caption>query term with required presence</caption>\n   * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n   */\n\n  lunr.Query.presence = {\n    /**\n     * Term's presence in a document is optional, this is the default value.\n     */\n    OPTIONAL: 1,\n\n    /**\n     * Term's presence in a document is required, documents that do not contain\n     * this term will not be returned.\n     */\n    REQUIRED: 2,\n\n    /**\n     * Term's presence in a document is prohibited, documents that do contain\n     * this term will not be returned.\n     */\n    PROHIBITED: 3\n  };\n  /**\n   * A single clause in a {@link lunr.Query} contains a term and details on how to\n   * match that term against a {@link lunr.Index}.\n   *\n   * @typedef {Object} lunr.Query~Clause\n   * @property {string[]} fields - The fields in an index this clause should be matched against.\n   * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n   * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n   * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n   * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n   * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n   */\n\n  /**\n   * Adds a {@link lunr.Query~Clause} to this query.\n   *\n   * Unless the clause contains the fields to be matched all fields will be matched. In addition\n   * a default boost of 1 is applied to the clause.\n   *\n   * @param {lunr.Query~Clause} clause - The clause to add to this query.\n   * @see lunr.Query~Clause\n   * @returns {lunr.Query}\n   */\n\n  lunr.Query.prototype.clause = function (clause) {\n    if (!('fields' in clause)) {\n      clause.fields = this.allFields;\n    }\n\n    if (!('boost' in clause)) {\n      clause.boost = 1;\n    }\n\n    if (!('usePipeline' in clause)) {\n      clause.usePipeline = true;\n    }\n\n    if (!('wildcard' in clause)) {\n      clause.wildcard = lunr.Query.wildcard.NONE;\n    }\n\n    if (clause.wildcard & lunr.Query.wildcard.LEADING && clause.term.charAt(0) != lunr.Query.wildcard) {\n      clause.term = \"*\" + clause.term;\n    }\n\n    if (clause.wildcard & lunr.Query.wildcard.TRAILING && clause.term.slice(-1) != lunr.Query.wildcard) {\n      clause.term = \"\" + clause.term + \"*\";\n    }\n\n    if (!('presence' in clause)) {\n      clause.presence = lunr.Query.presence.OPTIONAL;\n    }\n\n    this.clauses.push(clause);\n    return this;\n  };\n  /**\n   * A negated query is one in which every clause has a presence of\n   * prohibited. These queries require some special processing to return\n   * the expected results.\n   *\n   * @returns boolean\n   */\n\n\n  lunr.Query.prototype.isNegated = function () {\n    for (var i = 0; i < this.clauses.length; i++) {\n      if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n   * to the list of clauses that make up this query.\n   *\n   * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n   * to a token or token-like string should be done before calling this method.\n   *\n   * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n   * array, each term in the array will share the same options.\n   *\n   * @param {object|object[]} term - The term(s) to add to the query.\n   * @param {object} [options] - Any additional properties to add to the query clause.\n   * @returns {lunr.Query}\n   * @see lunr.Query#clause\n   * @see lunr.Query~Clause\n   * @example <caption>adding a single term to a query</caption>\n   * query.term(\"foo\")\n   * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n   * query.term(\"foo\", {\n   *   fields: [\"title\"],\n   *   boost: 10,\n   *   wildcard: lunr.Query.wildcard.TRAILING\n   * })\n   * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n   * query.term(lunr.tokenizer(\"foo bar\"))\n   */\n\n\n  lunr.Query.prototype.term = function (term, options) {\n    if (Array.isArray(term)) {\n      term.forEach(function (t) {\n        this.term(t, lunr.utils.clone(options));\n      }, this);\n      return this;\n    }\n\n    var clause = options || {};\n    clause.term = term.toString();\n    this.clause(clause);\n    return this;\n  };\n\n  lunr.QueryParseError = function (message, start, end) {\n    this.name = \"QueryParseError\";\n    this.message = message;\n    this.start = start;\n    this.end = end;\n  };\n\n  lunr.QueryParseError.prototype = new Error();\n\n  lunr.QueryLexer = function (str) {\n    this.lexemes = [];\n    this.str = str;\n    this.length = str.length;\n    this.pos = 0;\n    this.start = 0;\n    this.escapeCharPositions = [];\n  };\n\n  lunr.QueryLexer.prototype.run = function () {\n    var state = lunr.QueryLexer.lexText;\n\n    while (state) {\n      state = state(this);\n    }\n  };\n\n  lunr.QueryLexer.prototype.sliceString = function () {\n    var subSlices = [],\n        sliceStart = this.start,\n        sliceEnd = this.pos;\n\n    for (var i = 0; i < this.escapeCharPositions.length; i++) {\n      sliceEnd = this.escapeCharPositions[i];\n      subSlices.push(this.str.slice(sliceStart, sliceEnd));\n      sliceStart = sliceEnd + 1;\n    }\n\n    subSlices.push(this.str.slice(sliceStart, this.pos));\n    this.escapeCharPositions.length = 0;\n    return subSlices.join('');\n  };\n\n  lunr.QueryLexer.prototype.emit = function (type) {\n    this.lexemes.push({\n      type: type,\n      str: this.sliceString(),\n      start: this.start,\n      end: this.pos\n    });\n    this.start = this.pos;\n  };\n\n  lunr.QueryLexer.prototype.escapeCharacter = function () {\n    this.escapeCharPositions.push(this.pos - 1);\n    this.pos += 1;\n  };\n\n  lunr.QueryLexer.prototype.next = function () {\n    if (this.pos >= this.length) {\n      return lunr.QueryLexer.EOS;\n    }\n\n    var _char5 = this.str.charAt(this.pos);\n\n    this.pos += 1;\n    return _char5;\n  };\n\n  lunr.QueryLexer.prototype.width = function () {\n    return this.pos - this.start;\n  };\n\n  lunr.QueryLexer.prototype.ignore = function () {\n    if (this.start == this.pos) {\n      this.pos += 1;\n    }\n\n    this.start = this.pos;\n  };\n\n  lunr.QueryLexer.prototype.backup = function () {\n    this.pos -= 1;\n  };\n\n  lunr.QueryLexer.prototype.acceptDigitRun = function () {\n    var _char6, charCode;\n\n    do {\n      _char6 = this.next();\n      charCode = _char6.charCodeAt(0);\n    } while (charCode > 47 && charCode < 58);\n\n    if (_char6 != lunr.QueryLexer.EOS) {\n      this.backup();\n    }\n  };\n\n  lunr.QueryLexer.prototype.more = function () {\n    return this.pos < this.length;\n  };\n\n  lunr.QueryLexer.EOS = 'EOS';\n  lunr.QueryLexer.FIELD = 'FIELD';\n  lunr.QueryLexer.TERM = 'TERM';\n  lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE';\n  lunr.QueryLexer.BOOST = 'BOOST';\n  lunr.QueryLexer.PRESENCE = 'PRESENCE';\n\n  lunr.QueryLexer.lexField = function (lexer) {\n    lexer.backup();\n    lexer.emit(lunr.QueryLexer.FIELD);\n    lexer.ignore();\n    return lunr.QueryLexer.lexText;\n  };\n\n  lunr.QueryLexer.lexTerm = function (lexer) {\n    if (lexer.width() > 1) {\n      lexer.backup();\n      lexer.emit(lunr.QueryLexer.TERM);\n    }\n\n    lexer.ignore();\n\n    if (lexer.more()) {\n      return lunr.QueryLexer.lexText;\n    }\n  };\n\n  lunr.QueryLexer.lexEditDistance = function (lexer) {\n    lexer.ignore();\n    lexer.acceptDigitRun();\n    lexer.emit(lunr.QueryLexer.EDIT_DISTANCE);\n    return lunr.QueryLexer.lexText;\n  };\n\n  lunr.QueryLexer.lexBoost = function (lexer) {\n    lexer.ignore();\n    lexer.acceptDigitRun();\n    lexer.emit(lunr.QueryLexer.BOOST);\n    return lunr.QueryLexer.lexText;\n  };\n\n  lunr.QueryLexer.lexEOS = function (lexer) {\n    if (lexer.width() > 0) {\n      lexer.emit(lunr.QueryLexer.TERM);\n    }\n  }; // This matches the separator used when tokenising fields\n  // within a document. These should match otherwise it is\n  // not possible to search for some tokens within a document.\n  //\n  // It is possible for the user to change the separator on the\n  // tokenizer so it _might_ clash with any other of the special\n  // characters already used within the search string, e.g. :.\n  //\n  // This means that it is possible to change the separator in\n  // such a way that makes some words unsearchable using a search\n  // string.\n\n\n  lunr.QueryLexer.termSeparator = lunr.tokenizer.separator;\n\n  lunr.QueryLexer.lexText = function (lexer) {\n    while (true) {\n      var _char7 = lexer.next();\n\n      if (_char7 == lunr.QueryLexer.EOS) {\n        return lunr.QueryLexer.lexEOS;\n      } // Escape character is '\\'\n\n\n      if (_char7.charCodeAt(0) == 92) {\n        lexer.escapeCharacter();\n        continue;\n      }\n\n      if (_char7 == \":\") {\n        return lunr.QueryLexer.lexField;\n      }\n\n      if (_char7 == \"~\") {\n        lexer.backup();\n\n        if (lexer.width() > 0) {\n          lexer.emit(lunr.QueryLexer.TERM);\n        }\n\n        return lunr.QueryLexer.lexEditDistance;\n      }\n\n      if (_char7 == \"^\") {\n        lexer.backup();\n\n        if (lexer.width() > 0) {\n          lexer.emit(lunr.QueryLexer.TERM);\n        }\n\n        return lunr.QueryLexer.lexBoost;\n      } // \"+\" indicates term presence is required\n      // checking for length to ensure that only\n      // leading \"+\" are considered\n\n\n      if (_char7 == \"+\" && lexer.width() === 1) {\n        lexer.emit(lunr.QueryLexer.PRESENCE);\n        return lunr.QueryLexer.lexText;\n      } // \"-\" indicates term presence is prohibited\n      // checking for length to ensure that only\n      // leading \"-\" are considered\n\n\n      if (_char7 == \"-\" && lexer.width() === 1) {\n        lexer.emit(lunr.QueryLexer.PRESENCE);\n        return lunr.QueryLexer.lexText;\n      }\n\n      if (_char7.match(lunr.QueryLexer.termSeparator)) {\n        return lunr.QueryLexer.lexTerm;\n      }\n    }\n  };\n\n  lunr.QueryParser = function (str, query) {\n    this.lexer = new lunr.QueryLexer(str);\n    this.query = query;\n    this.currentClause = {};\n    this.lexemeIdx = 0;\n  };\n\n  lunr.QueryParser.prototype.parse = function () {\n    this.lexer.run();\n    this.lexemes = this.lexer.lexemes;\n    var state = lunr.QueryParser.parseClause;\n\n    while (state) {\n      state = state(this);\n    }\n\n    return this.query;\n  };\n\n  lunr.QueryParser.prototype.peekLexeme = function () {\n    return this.lexemes[this.lexemeIdx];\n  };\n\n  lunr.QueryParser.prototype.consumeLexeme = function () {\n    var lexeme = this.peekLexeme();\n    this.lexemeIdx += 1;\n    return lexeme;\n  };\n\n  lunr.QueryParser.prototype.nextClause = function () {\n    var completedClause = this.currentClause;\n    this.query.clause(completedClause);\n    this.currentClause = {};\n  };\n\n  lunr.QueryParser.parseClause = function (parser) {\n    var lexeme = parser.peekLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    switch (lexeme.type) {\n      case lunr.QueryLexer.PRESENCE:\n        return lunr.QueryParser.parsePresence;\n\n      case lunr.QueryLexer.FIELD:\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.TERM:\n        return lunr.QueryParser.parseTerm;\n\n      default:\n        var errorMessage = \"expected either a field or a term, found \" + lexeme.type;\n\n        if (lexeme.str.length >= 1) {\n          errorMessage += \" with value '\" + lexeme.str + \"'\";\n        }\n\n        throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parsePresence = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    switch (lexeme.str) {\n      case \"-\":\n        parser.currentClause.presence = lunr.Query.presence.PROHIBITED;\n        break;\n\n      case \"+\":\n        parser.currentClause.presence = lunr.Query.presence.REQUIRED;\n        break;\n\n      default:\n        var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\";\n        throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      var errorMessage = \"expecting term or field, found nothing\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.FIELD:\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.TERM:\n        return lunr.QueryParser.parseTerm;\n\n      default:\n        var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseField = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n      var possibleFields = parser.query.allFields.map(function (f) {\n        return \"'\" + f + \"'\";\n      }).join(', '),\n          errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields;\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    parser.currentClause.fields = [lexeme.str];\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      var errorMessage = \"expecting term, found nothing\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        return lunr.QueryParser.parseTerm;\n\n      default:\n        var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseTerm = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    parser.currentClause.term = lexeme.str.toLowerCase();\n\n    if (lexeme.str.indexOf(\"*\") != -1) {\n      parser.currentClause.usePipeline = false;\n    }\n\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      parser.nextClause();\n      return;\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        parser.nextClause();\n        return lunr.QueryParser.parseTerm;\n\n      case lunr.QueryLexer.FIELD:\n        parser.nextClause();\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.EDIT_DISTANCE:\n        return lunr.QueryParser.parseEditDistance;\n\n      case lunr.QueryLexer.BOOST:\n        return lunr.QueryParser.parseBoost;\n\n      case lunr.QueryLexer.PRESENCE:\n        parser.nextClause();\n        return lunr.QueryParser.parsePresence;\n\n      default:\n        var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseEditDistance = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    var editDistance = parseInt(lexeme.str, 10);\n\n    if (isNaN(editDistance)) {\n      var errorMessage = \"edit distance must be numeric\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    parser.currentClause.editDistance = editDistance;\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      parser.nextClause();\n      return;\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        parser.nextClause();\n        return lunr.QueryParser.parseTerm;\n\n      case lunr.QueryLexer.FIELD:\n        parser.nextClause();\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.EDIT_DISTANCE:\n        return lunr.QueryParser.parseEditDistance;\n\n      case lunr.QueryLexer.BOOST:\n        return lunr.QueryParser.parseBoost;\n\n      case lunr.QueryLexer.PRESENCE:\n        parser.nextClause();\n        return lunr.QueryParser.parsePresence;\n\n      default:\n        var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  };\n\n  lunr.QueryParser.parseBoost = function (parser) {\n    var lexeme = parser.consumeLexeme();\n\n    if (lexeme == undefined) {\n      return;\n    }\n\n    var boost = parseInt(lexeme.str, 10);\n\n    if (isNaN(boost)) {\n      var errorMessage = \"boost must be numeric\";\n      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);\n    }\n\n    parser.currentClause.boost = boost;\n    var nextLexeme = parser.peekLexeme();\n\n    if (nextLexeme == undefined) {\n      parser.nextClause();\n      return;\n    }\n\n    switch (nextLexeme.type) {\n      case lunr.QueryLexer.TERM:\n        parser.nextClause();\n        return lunr.QueryParser.parseTerm;\n\n      case lunr.QueryLexer.FIELD:\n        parser.nextClause();\n        return lunr.QueryParser.parseField;\n\n      case lunr.QueryLexer.EDIT_DISTANCE:\n        return lunr.QueryParser.parseEditDistance;\n\n      case lunr.QueryLexer.BOOST:\n        return lunr.QueryParser.parseBoost;\n\n      case lunr.QueryLexer.PRESENCE:\n        parser.nextClause();\n        return lunr.QueryParser.parsePresence;\n\n      default:\n        var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\";\n        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);\n    }\n  }\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;\n\n  (function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory);\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory();\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory();\n    }\n  })(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr;\n  });\n})();"],"sourceRoot":""}